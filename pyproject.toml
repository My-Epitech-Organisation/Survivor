[tool.ruff]
# Enable a comprehensive set of rules for modern Django projects
select = [
    "E",    # pycodestyle errors
    "F",    # pyflakes
    "I",    # isort
    "W",    # pycodestyle warnings
    "C90",  # mccabe complexity
    "N",    # pep8-naming
    "D",    # pydocstyle
    "UP",   # pyupgrade
    "B",    # flake8-bugbear
    "A",    # flake8-builtins
    "COM",  # flake8-commas
    "C4",   # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "EM",   # flake8-errmsg
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions
    "G",    # flake8-logging-format
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "PT",   # flake8-pytest-style
    "RET",  # flake8-return
    "SIM",  # flake8-simplify
    "ARG",  # flake8-unused-arguments
    "PL",   # pylint
    "RUF",  # ruff-specific rules
    "DJ",   # flake8-django
]

# Django-specific ignores
ignore = [
    "DJ001",    # Ignore null=True validation warning for Django models
    "D203",     # Conflicts with D211
    "D212",     # Conflicts with D213
    "E501",     # Line too long (handled by formatter)
    "RUF012",   # Mutable class attributes should be annotated with typing.ClassVar
    "DJ012",    # Django model should define __str__ method
]

# Allow autofix for all enabled rules (when '--fix') is provided
fixable = ["ALL"]
unfixable = []

# Exclude directories not relevant for linting
exclude = [
    ".git",
    ".env",
    ".venv",
    "venv",
    "env",
    "migrations",
    "__pycache__",
    "build",
    "dist",
    "node_modules",
    ".github",
    ".pytest_cache",
    ".coverage",
    "media",
    "staticfiles",
]

# Line length matching Django's recommendation
line-length = 119

# Modern Python version
target-version = "py310"

# Assume Django
external = ["django"]

[tool.ruff.pydocstyle]
convention = "google"  # Google style docstrings

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.isort]
known-first-party = ["backend", "admin_panel", "exposed_api", "public_panel", "init"]
known-third-party = ["django", "rest_framework"]
section-order = ["future", "standard-library", "django", "third-party", "first-party", "local-folder"]

[tool.ruff.isort.sections]
django = ["django", "rest_framework"]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401", "D104"]  # Ignore unused imports in __init__.py
"tests/*" = ["D100", "D101", "D102", "D103"]  # Ignore docstring requirements in tests
"backend/settings.py" = ["E501"]  # Ignore line length in settings

[tool.black]
line-length = 119
target-version = ['py310']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | migrations
  | node_modules
  | media
  | staticfiles
)/
'''

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

# Django-specific settings
plugins = ["mypy_django_plugin.main"]

[[tool.mypy.overrides]]
module = "*.migrations.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "django.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "rest_framework.*"
ignore_missing_imports = true

[tool.django-stubs]
django_settings_module = "backend.settings"

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "backend.settings"
python_files = ["test_*.py", "*_test.py", "tests.py"]
testpaths = ["backend"]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::django.utils.deprecation.RemovedInDjango50Warning",
]
